/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var intersect_geo = ee.FeatureCollection("projects/iscertc/assets/intersect_geo_03-23"),
    samples_evergreen = ee.FeatureCollection("projects/iscertc/assets/np_samples_evergreen"),
    samples_flat = ee.FeatureCollection("projects/iscertc/assets/np_samples_flat"),
    samples_grassland = ee.FeatureCollection("projects/iscertc/assets/np_samples_grassland"),
    samples_steep = ee.FeatureCollection("projects/iscertc/assets/np_samples_steep");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////////////////////////////////////////////////////////////////////////////////////
// SAR-RTC Comparison - SERVIR/ASF/Google 
// - Time Series   
// --- Coefficient of Variation (CoV) by forest & grassland (VV vs. VH)
// --- CoV by flat & steep (VV vs. VH)
// Author: Helen Blue Parache, Marshall Space Flight Center
// Date created: 10/09/2020
// Last modified:4/10/2023 
////////////////////////////////////////////////////////////////////////////////////////
//Parts that the user has to change:
// 1. Samples (imported above as "samples_evergreen", "samples_flat", etc. keep same naming convention)
// 2. AOI geometry (imported above as "intersect_geo")
// 3. SAR data product (imported from assets below)
// 4. VV or VH (comment out to select your preferred input below)
// ---------------- Define AOI Extent --------------------------------------------------------
Map.addLayer(intersect_geo, {}, "area intersection - SAR, DEM");
Map.centerObject(intersect_geo); 
///////////////////////////////////////// GAMMA ///////////////////////////////////////////////
//Prep SAR data
var assetList = ee.data.listAssets("projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP")['assets']
                    .map(function(d) { return d.name });
//print(assetList, "assetList") //275 elements
var collection = ee.ImageCollection(assetList);
//print(collection, "collection");
var vh_1 = ee.ImageCollection(["projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190211T122142_DVP_RTC10_G_gpufem_1B12_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190118T122143_DVP_RTC10_G_gpufem_D39E_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190130T122143_DVP_RTC10_G_gpufem_C193_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190106T122144_DVP_RTC10_G_gpufem_8651_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190331T122143_DVP_RTC10_G_gpufem_0265_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190319T122142_DVP_RTC10_G_gpufem_442F_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190307T122142_DVP_RTC10_G_gpufem_AA15_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190223T122142_DVP_RTC10_G_gpufem_7556_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191102T122152_DVP_RTC10_G_gpufem_79C0_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190424T122144_DVP_RTC10_G_gpufem_0245_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191009T122152_DVP_RTC10_G_gpufem_2E5C_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190518T122145_DVP_RTC10_G_gpufem_80CA_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191220T122151_DVP_RTC10_G_gpufem_D5C1_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190903T122151_DVP_RTC10_G_gpufem_6228_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190810T122150_DVP_RTC10_G_gpufem_FCAF_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190705T122147_DVP_RTC10_G_gpufem_947E_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191208T122151_DVP_RTC10_G_gpufem_7EF4_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190530T122145_DVP_RTC10_G_gpufem_E28A_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190729T122149_DVP_RTC10_G_gpufem_064E_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190915T122151_DVP_RTC10_G_gpufem_D38A_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191021T122152_DVP_RTC10_G_gpufem_318A_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190623T122147_DVP_RTC10_G_gpufem_07AC_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190717T122148_DVP_RTC10_G_gpufem_293B_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190822T122150_DVP_RTC10_G_gpufem_C27E_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191126T122152_DVP_RTC10_G_gpufem_7300_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191114T122152_DVP_RTC10_G_gpufem_30BE_VH","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190927T122152_DVP_RTC10_G_gpufem_8136_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190611T122146_DVP_RTC10_G_gpufem_6BEC_VH"]) //"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190717T122148_DVP_RTC10_G_gpufem_EFF6_VH",
//print(vh_1, "is this image collection from images here? (simple one)"); //yes, except for one missing scene
//repeat for vv simple
var ic_4band = ee.ImageCollection(["projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190813T001127_DVP_RTC10_G_gpunem_DECD","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190109T001121_DVP_RTC10_G_gpunem_5955",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190121T001121_DVP_RTC10_G_gpunem_3E84","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190202T001120_DVP_RTC10_G_gpunem_39A9",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190214T001120_DVP_RTC10_G_gpunem_C57F","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190226T001120_DVP_RTC10_G_gpunem_A3FB",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190310T001120_DVP_RTC10_G_gpunem_E240","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190322T001120_DVP_RTC10_G_gpunem_82DC",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190403T001120_DVP_RTC10_G_gpunem_C3B2","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190415T001120_DVP_RTC10_G_gpunem_1346",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190427T001121_DVP_RTC10_G_gpunem_BE96","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190509T001121_DVP_RTC10_G_gpunem_B7A5",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190521T001122_DVP_RTC10_G_gpunem_AC2D","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190602T001123_DVP_RTC10_G_gpunem_7298",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190614T001123_DVP_RTC10_G_gpunem_3A81","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190708T001125_DVP_RTC10_G_gpunem_BC20",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190720T001126_DVP_RTC10_G_gpunem_030D","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190801T001126_DVP_RTC10_G_gpunem_C322",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190825T001128_DVP_RTC10_G_gpunem_A804","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190906T001128_DVP_RTC10_G_gpunem_9771",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190918T001129_DVP_RTC10_G_gpunem_5DDC","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190930T001129_DVP_RTC10_G_gpunem_74EF",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191012T001129_DVP_RTC10_G_gpunem_3285","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191024T001129_DVP_RTC10_G_gpunem_B75C",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191105T001129_DVP_RTC10_G_gpunem_1A28","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191117T001129_DVP_RTC10_G_gpunem_A9D1",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191129T001129_DVP_RTC10_G_gpunem_4543", 
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191211T001128_DVP_RTC10_G_gpunem_D638","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191223T001128_DVP_RTC10_G_gpunem_B51C"])
print(ic_4band, "this should be full of all my four band friends");
var set_polarization_vh = function (image) {
  return image.select('VH');
};
var set_polarization_vv = function (image) {
  return image.select('VV');
};
var vh_2 = ic_4band.map(set_polarization_vh);
//print(vh_2, "is this vh for my 4 band friends?"); //yes
var vh = vh_1.merge(vh_2);
//print(vh, "merged vh ic?");
var vv_1 = ee.ImageCollection(["projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190211T122142_DVP_RTC10_G_gpufem_1B12_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190118T122143_DVP_RTC10_G_gpufem_D39E_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190130T122143_DVP_RTC10_G_gpufem_C193_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190106T122144_DVP_RTC10_G_gpufem_8651_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190331T122143_DVP_RTC10_G_gpufem_0265_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190319T122142_DVP_RTC10_G_gpufem_442F_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190307T122142_DVP_RTC10_G_gpufem_AA15_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190223T122142_DVP_RTC10_G_gpufem_7556_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191102T122152_DVP_RTC10_G_gpufem_79C0_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190424T122144_DVP_RTC10_G_gpufem_0245_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191009T122152_DVP_RTC10_G_gpufem_2E5C_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190518T122145_DVP_RTC10_G_gpufem_80CA_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191220T122151_DVP_RTC10_G_gpufem_D5C1_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190903T122151_DVP_RTC10_G_gpufem_6228_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190810T122150_DVP_RTC10_G_gpufem_FCAF_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190705T122147_DVP_RTC10_G_gpufem_947E_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191208T122151_DVP_RTC10_G_gpufem_7EF4_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190530T122145_DVP_RTC10_G_gpufem_E28A_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190729T122149_DVP_RTC10_G_gpufem_064E_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190915T122151_DVP_RTC10_G_gpufem_D38A_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191021T122152_DVP_RTC10_G_gpufem_318A_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190623T122147_DVP_RTC10_G_gpufem_07AC_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190717T122148_DVP_RTC10_G_gpufem_293B_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190822T122150_DVP_RTC10_G_gpufem_C27E_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191126T122152_DVP_RTC10_G_gpufem_7300_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20191114T122152_DVP_RTC10_G_gpufem_30BE_VV","projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190927T122152_DVP_RTC10_G_gpufem_8136_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_NP/S1A_IW_20190611T122146_DVP_RTC10_G_gpufem_6BEC_VV"]); //
print(vv_1, "vv_1 - anything not upload correctly?");
var vv_2 = ic_4band.map(set_polarization_vv);
//print(vv_2, "is this vv for my 4 band friends?");
var add_prop = function (image){
  var id = image.get('system:id');
  return image.set('ID', id);
};
var vv = vv_1.merge(vv_2);
var vh_pw = vh.map(add_prop);
var vv_pw = vv.map(add_prop);
//print(vh_pw, "vh_pw"); //do I have a property? yes
//////////////////////////////// SWAP INPUTS BELOW //////////////////////////////////////////////////////
var input = vv_pw;
//var input = vh_pw;
//////////////////////////////// SWAP INPUTS ABOVE //////////////////////////////////////////////////////
var set_jan = function(image) {
  return image.set('month', "1").rename("b1");//m); //this sets the month for the individual image, which allows the property to be carried over during a merge
}; //ugh is there a way to do two variables so that I can put in the month when I call the function?? //for loop?
var set_feb = function(image) {
  return image.set('month', "2").rename("b1");//m); //trying to rename all scenes as b1 to avoid "incompatible bands" error later on - didn't work :/
};
var set_mar = function(image) {
  return image.set('month', "3").rename("b1");//m); 
};
var set_apr = function(image) {
  return image.set('month', "4").rename("b1");//m); 
};
var set_may = function(image) {
  return image.set('month', "5").rename("b1");//m); 
};
var set_jun = function(image) {
  return image.set('month', "6").rename("b1");//m); 
};
var set_jul = function(image) {
  return image.set('month', "7").rename("b1");//m); 
};
var set_aug = function(image) {
  return image.set('month', "8").rename("b1");//m); 
};
var set_sep = function(image) {
  return image.set('month', "9").rename("b1");//m); 
};
var set_oct = function(image) {
  return image.set('month', "10").rename("b1");//m); 
};
var set_nov = function(image) {
  return image.set('month', "11").rename("b1");//m); 
};
var set_dec = function(image) {
  return image.set('month', "12").rename("b1");//m); 
};
/*var jan_test = input.filterMetadata('ID', 'contains', '_201901');
var jan_test_cont = jan_test.map(set_month);
print(jan_test_cont)*/
//var jan = input.filterMetadata('ID', 'contains', '_201901').set('month', 1); //YES //is the month property there?
var jan = input.filterMetadata('ID', 'contains', '_201901').map(set_jan);
//print(jan, "do we have the property for jan?");
var feb = input.filterMetadata('ID', 'contains', '_201902').map(set_feb); //YES
//print(feb, "do we have the images for feb?");
var mar = input.filterMetadata('ID', 'contains', '_201903').map(set_mar); //YES
//print(mar, "do we have the images for mar?");
var apr = input.filterMetadata('ID', 'contains', '_201904').map(set_apr); //YES
//print(apr, "do we have the images for apr?");
var may = input.filterMetadata('ID', 'contains', '_201905').map(set_may); //YES
//print(may, "do we have the images for may?");
var jun = input.filterMetadata('ID', 'contains', '_201906').map(set_jun); //YES
//print(jun, "do we have the images for jun?");
var jul = input.filterMetadata('ID', 'contains', '_201907').map(set_jul); //YES
//print(jul, "do we have the images for jul?");
var aug = input.filterMetadata('ID', 'contains', '_201908').map(set_aug); //YES
//print(aug, "do we have the images for aug?");
var sep = input.filterMetadata('ID', 'contains', '_201909').map(set_sep); //YES
//print(sep, "do we have the images for sep?");
var oct = input.filterMetadata('ID', 'contains', '_201910').map(set_oct); //YES
//print(oct, "do we have the images for oct?");
var nov = input.filterMetadata('ID', 'contains', '_201911').map(set_nov); //YES
//print(nov, "do we have the images for nov?");
var dec = input.filterMetadata('ID', 'contains', '_201912').map(set_dec); //YES 
//print(dec, "do we have the images for dec?"); 
//merge back into one, check to make sure properties are all still there
var merge_1 =jan.merge(feb);
var merge_2 =  ee.ImageCollection(merge_1).merge(mar); //copy properties requires a source parameter
var merge_3 = merge_2.merge(apr);
var merge_4 = merge_3.merge(may);
var merge_5 = merge_4.merge(jun);
var merge_6 = merge_5.merge(jul);
var merge_7 = merge_6.merge(aug);
var merge_8 = merge_7.merge(sep);
var merge_9 = merge_8.merge(oct);
var merge_10 = merge_9.merge(nov);
var merge_final = merge_10.merge(dec);
//print(merge_final, "merge_final") //do we still have our month property? yes
// ------------------- Calculate Monthly Mean & Variance -------------------------------------------------
// one image per month of mean of all pixels, variance of all pixels
//var months = ee.List.sequence(1, 12);
var months = ee.List(["1", "2", "3", "4","5", "6", "7", "8", "9", "10", "11", "12"]); 
//print("months",months);
//Next step would be to make this the monthly mean, variance calculations into functions
//mean
var monthly_mean = ee.ImageCollection.fromImages(
  months.map(function (m) {
    return merge_final 
      //.filter(ee.Filter.calendarRange(m, m, 'month'))
      .filterMetadata('month', 'contains', m) 
      .mean()
      .set('month', m);
 }));
 
print(monthly_mean, "monthly mean - check it's one image for each month in an ic"); //YES
//variance
var monthly_variance = ee.ImageCollection.fromImages(
  months.map(function (m) {
    return merge_final 
      //.filter(ee.Filter.calendarRange(m, m, 'month'))
      .filterMetadata('month', 'contains', m) 
      //.variance()
      .reduce({reducer: ee.Reducer.variance()})
      .rename('b1') //trying to fix incompatible bands issue - nope, where is the VH band coming from??
      .toFloat() //trying to fix incompatible bands issue
      .set('month', m);
 }));
 
 print(monthly_variance, "monthly variance - check it's one image for each month in an ic"); //YES
// ---------------- Get monthly mean for each sample ----------------------------------------------------
// this is taking mean of means, acceptable bc all means have same sample number
// ie same number of images for each selected pixel
var properties = ee.List(['mean']);
//var properties = ee.List(['month', 'mean']);
//mean_landcover
var mean_evergreen = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_evergreen,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
}); 
//print(mean_evergreen, "check ")
var mean_grassland = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_grassland,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
//mean_slope
var mean_flat = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_flat,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var mean_steep = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_steep,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
// ---------------- Get monthly variance for each sample ----------------------------------------------------
//NP_DES_variance_landcover
var variance_evergreen = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_evergreen,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var variance_grassland = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_grassland,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
//variance_slope
var variance_flat = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_flat,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var variance_steep = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_steep,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
// ---------------- Separate by Month ---------------------------------------------------------
// this is taking mean of means for each point, acceptable bc all means have same sample number
// ie same number of images for each selected pixel
var properties = ee.List(['mean']);
//Make each month separate
// LC - evergreen
var jan_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "1")).flatten();
//print(jan_mean_evergreen, "this is the january fc"); //feature collection
var feb_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "2")).flatten();
var mar_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "3")).flatten();
var apr_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "4")).flatten();
var may_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "5")).flatten();
var jun_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "6")).flatten();
var jul_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "7")).flatten();
var aug_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "8")).flatten();
var sep_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "9")).flatten();
var oct_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "10")).flatten();
var nov_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "11")).flatten();
var dec_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', "12")).flatten();
var jan_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "1")).flatten();
var feb_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "2")).flatten();
var mar_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "3")).flatten();
var apr_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "4")).flatten();
var may_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "5")).flatten();
var jun_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "6")).flatten();
var jul_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "7")).flatten();
var aug_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "8")).flatten();
var sep_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "9")).flatten();
var oct_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "10")).flatten();
var nov_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "11")).flatten();
var dec_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', "12")).flatten();
//LC - grassland
var jan_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "1")).flatten();
var feb_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "2")).flatten();
var mar_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "3")).flatten();
var apr_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "4")).flatten();
var may_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "5")).flatten();
var jun_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "6")).flatten();
var jul_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "7")).flatten();
var aug_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "8")).flatten();
var sep_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "9")).flatten();
var oct_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "10")).flatten();
var nov_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "11")).flatten();
var dec_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', "12")).flatten();
var jan_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "1")).flatten();
var feb_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "2")).flatten();
var mar_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "3")).flatten();
var apr_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "4")).flatten();
var may_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "5")).flatten();
var jun_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "6")).flatten();
var jul_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "7")).flatten();
var aug_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "8")).flatten();
var sep_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "9")).flatten();
var oct_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "10")).flatten();
var nov_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "11")).flatten();
var dec_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', "12")).flatten();
//slope - flat
var jan_mean_flat = mean_flat.filter(ee.Filter.eq('month', "1")).flatten();
var feb_mean_flat = mean_flat.filter(ee.Filter.eq('month', "2")).flatten();
var mar_mean_flat = mean_flat.filter(ee.Filter.eq('month', "3")).flatten();
var apr_mean_flat = mean_flat.filter(ee.Filter.eq('month', "4")).flatten();
var may_mean_flat = mean_flat.filter(ee.Filter.eq('month', "5")).flatten();
var jun_mean_flat = mean_flat.filter(ee.Filter.eq('month', "6")).flatten();
var jul_mean_flat = mean_flat.filter(ee.Filter.eq('month', "7")).flatten();
var aug_mean_flat = mean_flat.filter(ee.Filter.eq('month', "8")).flatten();
var sep_mean_flat = mean_flat.filter(ee.Filter.eq('month', "9")).flatten();
var oct_mean_flat = mean_flat.filter(ee.Filter.eq('month', "10")).flatten();
var nov_mean_flat = mean_flat.filter(ee.Filter.eq('month', "11")).flatten();
var dec_mean_flat = mean_flat.filter(ee.Filter.eq('month', "12")).flatten();
var jan_variance_flat = variance_flat.filter(ee.Filter.eq('month', "1")).flatten();
var feb_variance_flat = variance_flat.filter(ee.Filter.eq('month', "2")).flatten();
var mar_variance_flat = variance_flat.filter(ee.Filter.eq('month', "3")).flatten();
var apr_variance_flat = variance_flat.filter(ee.Filter.eq('month', "4")).flatten();
var may_variance_flat = variance_flat.filter(ee.Filter.eq('month', "5")).flatten();
var jun_variance_flat = variance_flat.filter(ee.Filter.eq('month', "6")).flatten();
var jul_variance_flat = variance_flat.filter(ee.Filter.eq('month', "7")).flatten();
var aug_variance_flat = variance_flat.filter(ee.Filter.eq('month', "8")).flatten();
var sep_variance_flat = variance_flat.filter(ee.Filter.eq('month', "9")).flatten();
var oct_variance_flat = variance_flat.filter(ee.Filter.eq('month', "10")).flatten();
var nov_variance_flat = variance_flat.filter(ee.Filter.eq('month', "11")).flatten();
var dec_variance_flat = variance_flat.filter(ee.Filter.eq('month', "12")).flatten();
//slope - steep
var jan_mean_steep = mean_steep.filter(ee.Filter.eq('month', "1")).flatten();
var feb_mean_steep = mean_steep.filter(ee.Filter.eq('month', "2")).flatten();
var mar_mean_steep = mean_steep.filter(ee.Filter.eq('month', "3")).flatten();
var apr_mean_steep = mean_steep.filter(ee.Filter.eq('month', "4")).flatten();
var may_mean_steep = mean_steep.filter(ee.Filter.eq('month', "5")).flatten();
var jun_mean_steep = mean_steep.filter(ee.Filter.eq('month', "6")).flatten();
var jul_mean_steep = mean_steep.filter(ee.Filter.eq('month', "7")).flatten();
var aug_mean_steep = mean_steep.filter(ee.Filter.eq('month', "8")).flatten();
var sep_mean_steep = mean_steep.filter(ee.Filter.eq('month', "9")).flatten();
var oct_mean_steep = mean_steep.filter(ee.Filter.eq('month', "10")).flatten();
var nov_mean_steep = mean_steep.filter(ee.Filter.eq('month', "11")).flatten();
var dec_mean_steep = mean_steep.filter(ee.Filter.eq('month', "12")).flatten();
var jan_variance_steep = variance_steep.filter(ee.Filter.eq('month', "1")).flatten();
var feb_variance_steep = variance_steep.filter(ee.Filter.eq('month', "2")).flatten();
var mar_variance_steep = variance_steep.filter(ee.Filter.eq('month', "3")).flatten();
var apr_variance_steep = variance_steep.filter(ee.Filter.eq('month', "4")).flatten();
var may_variance_steep = variance_steep.filter(ee.Filter.eq('month', "5")).flatten();
var jun_variance_steep = variance_steep.filter(ee.Filter.eq('month', "6")).flatten();
var jul_variance_steep = variance_steep.filter(ee.Filter.eq('month', "7")).flatten();
var aug_variance_steep = variance_steep.filter(ee.Filter.eq('month', "8")).flatten();
var sep_variance_steep = variance_steep.filter(ee.Filter.eq('month', "9")).flatten();
var oct_variance_steep = variance_steep.filter(ee.Filter.eq('month', "10")).flatten();
var nov_variance_steep = variance_steep.filter(ee.Filter.eq('month', "11")).flatten();
var dec_variance_steep = variance_steep.filter(ee.Filter.eq('month', "12")).flatten();
//------------------------- Calculate CV ------------------------------------------------------
// ---------------- Apply Power to dB Conversion -------------------------------------------
// CoV = stdDev/mean
var toOneNum = function(fc) {
  var one_num = fc.reduceColumns({ //need this to be a feature collection instead of a feature
    reducer: ee.Reducer.mean(),
    selectors: properties
  })
  return ee.Number(one_num.get('mean'));
};
var properties_1 = ee.List(['mean']); // this is still mean, since we used the "mean" reducer to collect the pixel value at the point location
var stdDev = function(fc) {
  var one_num = fc.reduceColumns({
    reducer: ee.Reducer.sum(),
    selectors: properties_1
  })
  var sum = one_num.get('sum')
  var stdev = ee.Number(sum).sqrt()
  return ee.Number(stdev);
};
//https://socratic.org/statistics/random-variables/addition-rules-for-variances#:~:text=You%20cannot%20just%20add%20the,won't%20delve%20into).
//use variance reducer instead of standard deviation, then sum all variance values, finally take square root
var properties_1 = ee.List(['mean']); // this is still mean, since we used the "mean" reducer to collect the pixel value at the point location
var toDb = function(num) {
  return num.log10().multiply(10);
};
var list_CV_evergreen_db = ee.List([ //error message: Number.divide: Parameter 'right' is required.
  toDb(stdDev(jan_variance_evergreen).divide(toOneNum(jan_mean_evergreen))),
  toDb(stdDev(feb_variance_evergreen).divide(toOneNum(feb_mean_evergreen))), 
  toDb(stdDev(mar_variance_evergreen).divide(toOneNum(mar_mean_evergreen))),
  toDb(stdDev(apr_variance_evergreen).divide(toOneNum(apr_mean_evergreen))), 
  toDb(stdDev(may_variance_evergreen).divide(toOneNum(may_mean_evergreen))),  
  toDb(stdDev(jun_variance_evergreen).divide(toOneNum(jun_mean_evergreen))),
  toDb(stdDev(jul_variance_evergreen).divide(toOneNum(jul_mean_evergreen))),
  toDb(stdDev(aug_variance_evergreen).divide(toOneNum(aug_mean_evergreen))),
  toDb(stdDev(sep_variance_evergreen).divide(toOneNum(sep_mean_evergreen))),
  toDb(stdDev(oct_variance_evergreen).divide(toOneNum(oct_mean_evergreen))), 
  toDb(stdDev(nov_variance_evergreen).divide(toOneNum(nov_mean_evergreen))), 
  toDb(stdDev(dec_variance_evergreen).divide(toOneNum(dec_mean_evergreen)))
]);
print(list_CV_evergreen_db, "CV Evergreen (db)");
var list_CV_grassland_db = ee.List([
  toDb(stdDev(jan_variance_grassland).divide(toOneNum(jan_mean_grassland))),
  toDb(stdDev(feb_variance_grassland).divide(toOneNum(feb_mean_grassland))), 
  toDb(stdDev(mar_variance_grassland).divide(toOneNum(mar_mean_grassland))),
  toDb(stdDev(apr_variance_grassland).divide(toOneNum(apr_mean_grassland))), 
  toDb(stdDev(may_variance_grassland).divide(toOneNum(may_mean_grassland))),  
  toDb(stdDev(jun_variance_grassland).divide(toOneNum(jun_mean_grassland))),
  toDb(stdDev(jul_variance_grassland).divide(toOneNum(jul_mean_grassland))),
  toDb(stdDev(aug_variance_grassland).divide(toOneNum(aug_mean_grassland))),
  toDb(stdDev(sep_variance_grassland).divide(toOneNum(sep_mean_grassland))),
  toDb(stdDev(oct_variance_grassland).divide(toOneNum(oct_mean_grassland))), 
  toDb(stdDev(nov_variance_grassland).divide(toOneNum(nov_mean_grassland))), 
  toDb(stdDev(dec_variance_grassland).divide(toOneNum(dec_mean_grassland)))
]);
  
print(list_CV_grassland_db, "list_CV_grassland_db");
var list_CV_flat_db = ee.List([
  toDb(stdDev(jan_variance_flat).divide(toOneNum(jan_mean_flat))),
  toDb(stdDev(feb_variance_flat).divide(toOneNum(feb_mean_flat))), 
  toDb(stdDev(mar_variance_flat).divide(toOneNum(mar_mean_flat))),
  toDb(stdDev(apr_variance_flat).divide(toOneNum(apr_mean_flat))), 
  toDb(stdDev(may_variance_flat).divide(toOneNum(may_mean_flat))),  
  toDb(stdDev(jun_variance_flat).divide(toOneNum(jun_mean_flat))),
  toDb(stdDev(jul_variance_flat).divide(toOneNum(jul_mean_flat))),
  toDb(stdDev(aug_variance_flat).divide(toOneNum(aug_mean_flat))),
  toDb(stdDev(sep_variance_flat).divide(toOneNum(sep_mean_flat))),
  toDb(stdDev(oct_variance_flat).divide(toOneNum(oct_mean_flat))), 
  toDb(stdDev(nov_variance_flat).divide(toOneNum(nov_mean_flat))), 
  toDb(stdDev(dec_variance_flat).divide(toOneNum(dec_mean_flat)))
]);
  
print(list_CV_flat_db, "list_CV_flat_db");
print(stdDev(jan_variance_steep).divide(toOneNum(jan_mean_steep)), "steep"); 
print(stdDev(feb_variance_steep).divide(toOneNum(feb_mean_steep)), "steep"); 
print(stdDev(mar_variance_steep).divide(toOneNum(mar_mean_steep)), "steep"); 
print(stdDev(apr_variance_steep).divide(toOneNum(apr_mean_steep)), "steep"); 
print(stdDev(may_variance_steep).divide(toOneNum(may_mean_steep)), "steep"); 
print(stdDev(jun_variance_steep).divide(toOneNum(jun_mean_steep)), "steep");
print(stdDev(jul_variance_steep).divide(toOneNum(jul_mean_steep)), "steep");
print(stdDev(aug_variance_steep).divide(toOneNum(aug_mean_steep)), "steep");
print(stdDev(sep_variance_steep).divide(toOneNum(sep_mean_steep)), "steep");
print(stdDev(oct_variance_steep).divide(toOneNum(oct_mean_steep)), "steep"); 
print(stdDev(nov_variance_steep).divide(toOneNum(nov_mean_steep)), "steep"); 
print(stdDev(dec_variance_steep).divide(toOneNum(dec_mean_steep)), "steep");
var list_CV_steep_db = ee.List([
  toDb(stdDev(jan_variance_steep).divide(toOneNum(jan_mean_steep))),
  toDb(stdDev(feb_variance_steep).divide(toOneNum(feb_mean_steep))), 
  toDb(stdDev(mar_variance_steep).divide(toOneNum(mar_mean_steep))),
  toDb(stdDev(apr_variance_steep).divide(toOneNum(apr_mean_steep))), 
  toDb(stdDev(may_variance_steep).divide(toOneNum(may_mean_steep))),  
  toDb(stdDev(jun_variance_steep).divide(toOneNum(jun_mean_steep))),
  toDb(stdDev(jul_variance_steep).divide(toOneNum(jul_mean_steep))),
  toDb(stdDev(aug_variance_steep).divide(toOneNum(aug_mean_steep))),
  toDb(stdDev(sep_variance_steep).divide(toOneNum(sep_mean_steep))),
  toDb(stdDev(oct_variance_steep).divide(toOneNum(oct_mean_steep))), 
  toDb(stdDev(nov_variance_steep).divide(toOneNum(nov_mean_steep))), 
  toDb(stdDev(dec_variance_steep).divide(toOneNum(dec_mean_steep)))
]);
print(list_CV_steep_db, "list_CV_steep_db");
 
///////////////////////////// Generate Graph & CSV ////////////////////////////////////////////////////
var jan = 1;
var feb = 2;
var mar = 3;
var apr = 4;
var may = 5;
var jun = 6;
var jul = 7;
var aug = 8;
var sep = 9;
var oct = 10;
var nov = 11;
var dec = 12;
// Define the chart and print it to the console.
var chart_CV_evergreen_db = ui.Chart.array.values({array: list_CV_evergreen_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Evergreen',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_evergreen_db);
var chart_CV_grassland_db = ui.Chart.array.values({array: list_CV_grassland_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Grassland',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_grassland_db);
 
var chart_CV_steep_db = ui.Chart.array.values({array: list_CV_steep_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Steep',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_steep_db);
var chart_CV_flat_db = ui.Chart.array.values({array: list_CV_flat_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV flat',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_flat_db);
Map.addLayer(monthly_mean.first(), {}, "first image from monthly mean to compare with GTC values")
