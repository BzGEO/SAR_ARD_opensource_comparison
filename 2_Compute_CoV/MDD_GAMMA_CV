/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var samples_evergreen = ee.FeatureCollection("projects/iscertc/assets/mdd_samples_evergreen"),
    samples_flat = ee.FeatureCollection("projects/iscertc/assets/mdd_samples_flat"),
    samples_grassland = ee.FeatureCollection("projects/iscertc/assets/mdd_samples_grassland"),
    samples_steep = ee.FeatureCollection("projects/iscertc/assets/mdd_samples_steep"),
    intersect_geo = ee.FeatureCollection("projects/iscertc/assets/intersect_geo_mdd_4-24-23");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////////////////////////////////////////////////////////////////////////////////////
// SAR-RTC Comparison - SERVIR/ASF/Google 
// - Time Series [MDD]
// --- Coefficient of Variation (CoV) by forest & grassland (VV vs. VH)
// --- CoV by flat & steep (VV vs. VH)
// Author: Helen Blue Parache, Marshall Space Flight Center
// Date created: 10/09/2020
// Last modified:4/24/2023 
////////////////////////////////////////////////////////////////////////////////////////
//Parts that the user has to change:
// 1. Samples (imported above as "samples_evergreen", "samples_flat", etc. keep same naming convention)
// 2. AOI geometry (imported above as "intersect_geo")
// 3. SAR data product (imported from assets below)
// 4. VV or VH (comment out to select your preferred input below)
// ---------------- Define AOI Extent --------------------------------------------------------
Map.addLayer(intersect_geo, {}, "area intersection - SAR, DEM");
Map.centerObject(intersect_geo); 
///////////////////////////////////////// GAMMA ///////////////////////////////////////////////
//Prep SAR data
var assetList = ee.data.listAssets("projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD")['assets']
                    .map(function(d) { return d.name });
print(assetList, "assetList") //121` elements
var collection_prep = ee.ImageCollection(assetList);
var imageIDs = ee.List(["projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190103T101414_DVP_RTC10_G_gpunem_693B_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190103T101414_DVP_RTC10_G_gpunem_693B_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190104T230809_DVP_RTC10_G_gpunem_E2A3_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190104T230809_DVP_RTC10_G_gpunem_E2A3_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190115T101414_DVP_RTC10_G_gpunem_3B0E_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190115T101414_DVP_RTC10_G_gpunem_3B0E_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190127T101414_DVP_RTC10_G_gpunem_0CBA_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190127T101414_DVP_RTC10_G_gpunem_0CBA_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190128T230808_DVP_RTC10_G_gpunem_ADE6_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190128T230808_DVP_RTC10_G_gpunem_ADE6_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190208T101413_DVP_RTC10_G_gpunem_0F96_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190208T101413_DVP_RTC10_G_gpunem_0F96_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190209T230808_DVP_RTC10_G_gpunem_4D0D_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190209T230808_DVP_RTC10_G_gpunem_4D0D_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190220T101413_DVP_RTC10_G_gpunem_DD99_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190220T101413_DVP_RTC10_G_gpunem_DD99_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190221T230808_DVP_RTC10_G_gpunem_A0F8_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190221T230808_DVP_RTC10_G_gpunem_A0F8_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190304T101413_DVP_RTC10_G_gpunem_A538_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190304T101413_DVP_RTC10_G_gpunem_A538_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190305T230808_DVP_RTC10_G_gpunem_0123_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190305T230808_DVP_RTC10_G_gpunem_0123_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190316T101413_DVP_RTC10_G_gpunem_D4F1_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190316T101413_DVP_RTC10_G_gpunem_D4F1_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190317T230808_DVP_RTC10_G_gpunem_6B57_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190317T230808_DVP_RTC10_G_gpunem_6B57_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190328T101413_DVP_RTC10_G_gpunem_6DCB_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190328T101413_DVP_RTC10_G_gpunem_6DCB_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190329T230808_DVP_RTC10_G_gpunem_AA8B_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190329T230808_DVP_RTC10_G_gpunem_AA8B_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190409T101414_DVP_RTC10_G_gpunem_2B6B_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190409T101414_DVP_RTC10_G_gpunem_2B6B_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190410T230808_DVP_RTC10_G_gpunem_E4A5_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190410T230808_DVP_RTC10_G_gpunem_E4A5_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190421T101414_DVP_RTC10_G_gpunem_C705_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190421T101414_DVP_RTC10_G_gpunem_C705_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190422T230809_DVP_RTC10_G_gpunem_70C6_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190422T230809_DVP_RTC10_G_gpunem_70C6_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190503T101415_DVP_RTC10_G_gpunem_2182_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190503T101415_DVP_RTC10_G_gpunem_2182_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190504T230809_DVP_RTC10_G_gpunem_CA1B_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190504T230809_DVP_RTC10_G_gpunem_CA1B_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190515T101415_DVP_RTC10_G_gpunem_0CB7_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190515T101415_DVP_RTC10_G_gpunem_0CB7_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190516T230810_DVP_RTC10_G_gpunem_7974_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190516T230810_DVP_RTC10_G_gpunem_7974_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190527T101416_DVP_RTC10_G_gpunem_8ADC_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190527T101416_DVP_RTC10_G_gpunem_8ADC_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190528T230810_DVP_RTC10_G_gpunem_F5B5_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190528T230810_DVP_RTC10_G_gpunem_F5B5_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190608T101416_DVP_RTC10_G_gpunem_B38C_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190608T101416_DVP_RTC10_G_gpunem_B38C_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190609T230811_DVP_RTC10_G_gpunem_E776_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190609T230811_DVP_RTC10_G_gpunem_E776_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190620T101417_DVP_RTC10_G_gpunem_6DD1_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190620T101417_DVP_RTC10_G_gpunem_6DD1_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190621T230812_DVP_RTC10_G_gpunem_1081_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190621T230812_DVP_RTC10_G_gpunem_1081_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190702T101418_DVP_RTC10_G_gpunem_9CA2_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190702T101418_DVP_RTC10_G_gpunem_9CA2_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190703T230813_DVP_RTC10_G_gpunem_AA54_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190703T230813_DVP_RTC10_G_gpunem_AA54_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190714T101419_DVP_RTC10_G_gpunem_10EF_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190714T101419_DVP_RTC10_G_gpunem_10EF_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190715T230813_DVP_RTC10_G_gpunem_B935_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190715T230813_DVP_RTC10_G_gpunem_B935_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190726T101419_DVP_RTC10_G_gpunem_C9F8_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190726T101419_DVP_RTC10_G_gpunem_C9F8_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190727T230814_DVP_RTC10_G_gpunem_CAAB_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190727T230814_DVP_RTC10_G_gpunem_CAAB_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190807T101420_DVP_RTC10_G_gpunem_124B_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190807T101420_DVP_RTC10_G_gpunem_124B_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190808T230815_DVP_RTC10_G_gpunem_84F4_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190808T230815_DVP_RTC10_G_gpunem_84F4_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190819T101421_DVP_RTC10_G_gpunem_4912_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190819T101421_DVP_RTC10_G_gpunem_4912_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190820T230816_DVP_RTC10_G_gpufem_012B_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190820T230816_DVP_RTC10_G_gpufem_012B_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190831T101421_DVP_RTC10_G_gpunem_6838_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190831T101421_DVP_RTC10_G_gpunem_6838_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190901T230816_DVP_RTC10_G_gpunem_B5EA_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190901T230816_DVP_RTC10_G_gpunem_B5EA_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190912T101422_DVP_RTC10_G_gpunem_A7DE_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190912T101422_DVP_RTC10_G_gpunem_A7DE_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190913T230817_DVP_RTC10_G_gpunem_D905_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20190913T230817_DVP_RTC10_G_gpunem_D905_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191006T101423_DVP_RTC10_G_gpunem_6AFD_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191006T101423_DVP_RTC10_G_gpunem_6AFD_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191007T230817_DVP_RTC10_G_gpunem_9613_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191007T230817_DVP_RTC10_G_gpunem_9613_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191018T101423_DVP_RTC10_G_gpunem_3B3C_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191018T101423_DVP_RTC10_G_gpunem_3B3C_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191019T230817_DVP_RTC10_G_gpunem_23E0_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191019T230817_DVP_RTC10_G_gpunem_23E0_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191030T101423_DVP_RTC10_G_gpunem_FE89_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191030T101423_DVP_RTC10_G_gpunem_FE89_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191031T230817_DVP_RTC10_G_gpunem_DA22_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191031T230817_DVP_RTC10_G_gpunem_DA22_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191111T101423_DVP_RTC10_G_gpunem_3D5B_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191111T101423_DVP_RTC10_G_gpunem_3D5B_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191112T230817_DVP_RTC10_G_gpunem_E358_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191112T230817_DVP_RTC10_G_gpunem_E358_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191123T101423_DVP_RTC10_G_gpunem_DA32_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191123T101423_DVP_RTC10_G_gpunem_DA32_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191124T230817_DVP_RTC10_G_gpunem_0BC8_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191124T230817_DVP_RTC10_G_gpunem_0BC8_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191205T101422_DVP_RTC10_G_gpunem_FCDA_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191205T101422_DVP_RTC10_G_gpunem_FCDA_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191206T230816_DVP_RTC10_G_gpunem_A95E_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191206T230816_DVP_RTC10_G_gpunem_A95E_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191217T101422_DVP_RTC10_G_gpunem_9DCF_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191217T101422_DVP_RTC10_G_gpunem_9DCF_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191218T230816_DVP_RTC10_G_gpunem_7086_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191218T230816_DVP_RTC10_G_gpunem_7086_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191229T101421_DVP_RTC10_G_gpufem_CE33_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191229T101421_DVP_RTC10_G_gpufem_CE33_VV",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191230T230815_DVP_RTC10_G_gpunem_B4B5_VH",
"projects/servir-sco-assets/assets/SCO_AMZ/RTC_G_MDD/S1B_IW_20191230T230815_DVP_RTC10_G_gpunem_B4B5_VV"]);
print(imageIDs.length(), "number of IDs");
var add_prop = function (image){
  var id = image.get('system:id');
  var date = ee.String(ee.String(ee.String(id).split('_').get(5)).split('T').get(0)); //extract the date from the original image ID
  var year = ee.Number.parse(date.slice(0,4)); //define year from string to number
  var month = ee.Number.parse(date.slice(4,6)); //define month from string to number
  var day = ee.Number.parse(date.slice(6,8)); //define day from string to number  
  var image_prep = image.set("ID", id);
  return image_prep.set('system:time_start', ee.Date.fromYMD(year, month, day).millis());
};
var collection = collection_prep.map(add_prop);
print(collection, "check for date time in collection"); //exists...
//var new_collection = all_images.merge(collection)
var vh_prep = ee.ImageCollection(collection) 
    .filter(ee.Filter.inList('ID', imageIDs))
    .filterMetadata('ID', 'contains', 'VH')
    .filter(ee.Filter.bounds(intersect_geo)); //JIC
    
//print(vh_prep, "am i zero"); //not any more
var vv_prep = ee.ImageCollection(collection)
    .filter(ee.Filter.inList('ID', imageIDs))
    .filterMetadata('ID', 'contains', 'VV')
    .filter(ee.Filter.bounds(intersect_geo)); //JIC
print(vh_prep, "vh");
print(vv_prep, "vv");
//////////////////////////////// SWAP INPUTS BELOW //////////////////////////////////////////////////////
var input = vv_prep;
//var input = vh_prep;
//////////////////////////////// SWAP INPUTS ABOVE //////////////////////////////////////////////////////
// ------------------- Calculate Monthly Mean & Variance -------------------------------------------------
// one image per month of mean of all pixels, variance of all pixels
var months = ee.List.sequence(1, 12);
//print("months",months);
//mean
var monthly_mean = ee.ImageCollection.fromImages(
  months.map(function (m) {
    return input //would repeat this for each set VV vs VH, AS vs DES //trying to copy 
      .filter(ee.Filter.calendarRange(m, m, 'month'))
      .mean()
      .set('month', m);
 }));//.flatten()); //Need to flatten in order to have a feature collection of features rather than featureCollections (not features)*/
print(monthly_mean, "does it look good my monthly mean") //.copyProperties(m, ["month"])
//variance
var monthly_variance = ee.ImageCollection.fromImages(
  months.map(function (m) {
    return input 
      .filter(ee.Filter.calendarRange(m, m, 'month'))
      //.variance()
      .reduce({reducer: ee.Reducer.variance()})
      .set('month', m);
 }));
// ---------------- Get monthly mean for each sample ----------------------------------------------------
// this is taking mean of means, acceptable bc all means have same sample number
// ie same number of images for each selected pixel
var properties = ee.List(['mean']);
//var properties = ee.List(['month', 'mean']);
//mean_landcover
var mean_evergreen = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_evergreen,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
}); 
print(mean_evergreen, "check ") //this is fine
var mean_grassland = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_grassland,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
//mean_slope
var mean_flat = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_flat,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var mean_steep = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_steep,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
// ---------------- Get monthly variance for each sample ----------------------------------------------------
//NP_DES_variance_landcover
var variance_evergreen = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_evergreen,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var variance_grassland = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_grassland,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
//variance_slope
var variance_flat = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_flat,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var variance_steep = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_steep,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
// ---------------- Separate by Month ---------------------------------------------------------
// this is taking mean of means for each point, acceptable bc all means have same sample number
// ie same number of images for each selected pixel
var properties = ee.List(['mean']);
//Make each month separate
// LC - evergreen
var jan_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 1)).flatten();
//print(jan_mean_evergreen, "this is the january mean fc"); //feature collection
var feb_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 2)).flatten();
var mar_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 3)).flatten();
var apr_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 4)).flatten();
var may_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 5)).flatten();
var jun_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 6)).flatten();
var jul_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 7)).flatten();
var aug_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 8)).flatten();
var sep_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 9)).flatten();
var oct_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 10)).flatten();
var nov_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 11)).flatten();
var dec_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 12)).flatten();
var jan_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 1)).flatten();
var feb_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 2)).flatten();
var mar_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 3)).flatten();
var apr_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 4)).flatten();
var may_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 5)).flatten();
var jun_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 6)).flatten();
var jul_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 7)).flatten();
var aug_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 8)).flatten();
var sep_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 9)).flatten();
var oct_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 10)).flatten();
var nov_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 11)).flatten();
var dec_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 12)).flatten();
//print(jan_variance_evergreen, "this is the january variance fc");
//LC - grassland
var jan_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 1)).flatten();
var feb_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 2)).flatten();
var mar_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 3)).flatten();
var apr_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 4)).flatten();
var may_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 5)).flatten();
var jun_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 6)).flatten();
var jul_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 7)).flatten();
var aug_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 8)).flatten();
var sep_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 9)).flatten();
var oct_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 10)).flatten();
var nov_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 11)).flatten();
var dec_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 12)).flatten();
var jan_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 1)).flatten();
var feb_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 2)).flatten();
var mar_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 3)).flatten();
var apr_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 4)).flatten();
var may_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 5)).flatten();
var jun_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 6)).flatten();
var jul_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 7)).flatten();
var aug_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 8)).flatten();
var sep_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 9)).flatten();
var oct_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 10)).flatten();
var nov_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 11)).flatten();
var dec_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 12)).flatten();
//slope - flat
var jan_mean_flat = mean_flat.filter(ee.Filter.eq('month', 1)).flatten();
var feb_mean_flat = mean_flat.filter(ee.Filter.eq('month', 2)).flatten();
var mar_mean_flat = mean_flat.filter(ee.Filter.eq('month', 3)).flatten();
var apr_mean_flat = mean_flat.filter(ee.Filter.eq('month', 4)).flatten();
var may_mean_flat = mean_flat.filter(ee.Filter.eq('month', 5)).flatten();
var jun_mean_flat = mean_flat.filter(ee.Filter.eq('month', 6)).flatten();
var jul_mean_flat = mean_flat.filter(ee.Filter.eq('month', 7)).flatten();
var aug_mean_flat = mean_flat.filter(ee.Filter.eq('month', 8)).flatten();
var sep_mean_flat = mean_flat.filter(ee.Filter.eq('month', 9)).flatten();
var oct_mean_flat = mean_flat.filter(ee.Filter.eq('month', 10)).flatten();
var nov_mean_flat = mean_flat.filter(ee.Filter.eq('month', 11)).flatten();
var dec_mean_flat = mean_flat.filter(ee.Filter.eq('month', 12)).flatten();
var jan_variance_flat = variance_flat.filter(ee.Filter.eq('month', 1)).flatten();
var feb_variance_flat = variance_flat.filter(ee.Filter.eq('month', 2)).flatten();
var mar_variance_flat = variance_flat.filter(ee.Filter.eq('month', 3)).flatten();
var apr_variance_flat = variance_flat.filter(ee.Filter.eq('month', 4)).flatten();
var may_variance_flat = variance_flat.filter(ee.Filter.eq('month', 5)).flatten();
var jun_variance_flat = variance_flat.filter(ee.Filter.eq('month', 6)).flatten();
var jul_variance_flat = variance_flat.filter(ee.Filter.eq('month', 7)).flatten();
var aug_variance_flat = variance_flat.filter(ee.Filter.eq('month', 8)).flatten();
var sep_variance_flat = variance_flat.filter(ee.Filter.eq('month', 9)).flatten();
var oct_variance_flat = variance_flat.filter(ee.Filter.eq('month', 10)).flatten();
var nov_variance_flat = variance_flat.filter(ee.Filter.eq('month', 11)).flatten();
var dec_variance_flat = variance_flat.filter(ee.Filter.eq('month', 12)).flatten();
//slope - steep
var jan_mean_steep = mean_steep.filter(ee.Filter.eq('month', 1)).flatten();
var feb_mean_steep = mean_steep.filter(ee.Filter.eq('month', 2)).flatten();
var mar_mean_steep = mean_steep.filter(ee.Filter.eq('month', 3)).flatten();
var apr_mean_steep = mean_steep.filter(ee.Filter.eq('month', 4)).flatten();
var may_mean_steep = mean_steep.filter(ee.Filter.eq('month', 5)).flatten();
var jun_mean_steep = mean_steep.filter(ee.Filter.eq('month', 6)).flatten();
var jul_mean_steep = mean_steep.filter(ee.Filter.eq('month', 7)).flatten();
var aug_mean_steep = mean_steep.filter(ee.Filter.eq('month', 8)).flatten();
var sep_mean_steep = mean_steep.filter(ee.Filter.eq('month', 9)).flatten();
var oct_mean_steep = mean_steep.filter(ee.Filter.eq('month', 10)).flatten();
var nov_mean_steep = mean_steep.filter(ee.Filter.eq('month', 11)).flatten();
var dec_mean_steep = mean_steep.filter(ee.Filter.eq('month', 12)).flatten();
var jan_variance_steep = variance_steep.filter(ee.Filter.eq('month', 1)).flatten();
var feb_variance_steep = variance_steep.filter(ee.Filter.eq('month', 2)).flatten();
var mar_variance_steep = variance_steep.filter(ee.Filter.eq('month', 3)).flatten();
var apr_variance_steep = variance_steep.filter(ee.Filter.eq('month', 4)).flatten();
var may_variance_steep = variance_steep.filter(ee.Filter.eq('month', 5)).flatten();
var jun_variance_steep = variance_steep.filter(ee.Filter.eq('month', 6)).flatten();
var jul_variance_steep = variance_steep.filter(ee.Filter.eq('month', 7)).flatten();
var aug_variance_steep = variance_steep.filter(ee.Filter.eq('month', 8)).flatten();
var sep_variance_steep = variance_steep.filter(ee.Filter.eq('month', 9)).flatten();
var oct_variance_steep = variance_steep.filter(ee.Filter.eq('month', 10)).flatten();
var nov_variance_steep = variance_steep.filter(ee.Filter.eq('month', 11)).flatten();
var dec_variance_steep = variance_steep.filter(ee.Filter.eq('month', 12)).flatten();
//------------------------- Calculate CV ------------------------------------------------------
// ---------------- Apply Power to dB Conversion -------------------------------------------
// CoV = stdDev/mean
var toOneNum = function(fc) {
  var one_num = fc.reduceColumns({ //need this to be a feature collection instead of a feature
    reducer: ee.Reducer.mean(),
    selectors: properties
  })
  return ee.Number(one_num.get('mean'));
};
var properties_1 = ee.List(['mean']); // this is still mean, since we used the "mean" reducer to collect the pixel value at the point location
var stdDev = function(fc) {
  var one_num = fc.reduceColumns({
    reducer: ee.Reducer.sum(),
    selectors: properties_1
  })
  var sum = one_num.get('sum')
  var stdev = ee.Number(sum).sqrt()
  return ee.Number(stdev);
};
//https://socratic.org/statistics/random-variables/addition-rules-for-variances#:~:text=You%20cannot%20just%20add%20the,won't%20delve%20into).
//use variance reducer instead of standard deviation, then sum all variance values, finally take square root
var properties_1 = ee.List(['mean']); // this is still mean, since we used the "mean" reducer to collect the pixel value at the point location
var toDb = function(num) {
  return num.log10().multiply(10);
};
var list_CV_evergreen_db = ee.List([ //error message: Number.divide: Parameter 'right' is required.
  toDb(stdDev(jan_variance_evergreen).divide(toOneNum(jan_mean_evergreen))),
  toDb(stdDev(feb_variance_evergreen).divide(toOneNum(feb_mean_evergreen))), 
  toDb(stdDev(mar_variance_evergreen).divide(toOneNum(mar_mean_evergreen))),
  toDb(stdDev(apr_variance_evergreen).divide(toOneNum(apr_mean_evergreen))), 
  toDb(stdDev(may_variance_evergreen).divide(toOneNum(may_mean_evergreen))),  
  toDb(stdDev(jun_variance_evergreen).divide(toOneNum(jun_mean_evergreen))),
  toDb(stdDev(jul_variance_evergreen).divide(toOneNum(jul_mean_evergreen))),
  toDb(stdDev(aug_variance_evergreen).divide(toOneNum(aug_mean_evergreen))),
  toDb(stdDev(sep_variance_evergreen).divide(toOneNum(sep_mean_evergreen))),
  toDb(stdDev(oct_variance_evergreen).divide(toOneNum(oct_mean_evergreen))), 
  toDb(stdDev(nov_variance_evergreen).divide(toOneNum(nov_mean_evergreen))), 
  toDb(stdDev(dec_variance_evergreen).divide(toOneNum(dec_mean_evergreen)))
]);
print(list_CV_evergreen_db, "CV Evergreen (db)");
var list_CV_grassland_db = ee.List([
  toDb(stdDev(jan_variance_grassland).divide(toOneNum(jan_mean_grassland))),
  toDb(stdDev(feb_variance_grassland).divide(toOneNum(feb_mean_grassland))), 
  toDb(stdDev(mar_variance_grassland).divide(toOneNum(mar_mean_grassland))),
  toDb(stdDev(apr_variance_grassland).divide(toOneNum(apr_mean_grassland))), 
  toDb(stdDev(may_variance_grassland).divide(toOneNum(may_mean_grassland))),  
  toDb(stdDev(jun_variance_grassland).divide(toOneNum(jun_mean_grassland))),
  toDb(stdDev(jul_variance_grassland).divide(toOneNum(jul_mean_grassland))),
  toDb(stdDev(aug_variance_grassland).divide(toOneNum(aug_mean_grassland))),
  toDb(stdDev(sep_variance_grassland).divide(toOneNum(sep_mean_grassland))),
  toDb(stdDev(oct_variance_grassland).divide(toOneNum(oct_mean_grassland))), 
  toDb(stdDev(nov_variance_grassland).divide(toOneNum(nov_mean_grassland))), 
  toDb(stdDev(dec_variance_grassland).divide(toOneNum(dec_mean_grassland)))
]);
  
print(list_CV_grassland_db, "list_CV_grassland_db");
var list_CV_flat_db = ee.List([
  toDb(stdDev(jan_variance_flat).divide(toOneNum(jan_mean_flat))),
  toDb(stdDev(feb_variance_flat).divide(toOneNum(feb_mean_flat))), 
  toDb(stdDev(mar_variance_flat).divide(toOneNum(mar_mean_flat))),
  toDb(stdDev(apr_variance_flat).divide(toOneNum(apr_mean_flat))), 
  toDb(stdDev(may_variance_flat).divide(toOneNum(may_mean_flat))),  
  toDb(stdDev(jun_variance_flat).divide(toOneNum(jun_mean_flat))),
  toDb(stdDev(jul_variance_flat).divide(toOneNum(jul_mean_flat))),
  toDb(stdDev(aug_variance_flat).divide(toOneNum(aug_mean_flat))),
  toDb(stdDev(sep_variance_flat).divide(toOneNum(sep_mean_flat))),
  toDb(stdDev(oct_variance_flat).divide(toOneNum(oct_mean_flat))), 
  toDb(stdDev(nov_variance_flat).divide(toOneNum(nov_mean_flat))), 
  toDb(stdDev(dec_variance_flat).divide(toOneNum(dec_mean_flat)))
]);
  
print(list_CV_flat_db, "list_CV_flat_db");
print(stdDev(jan_variance_steep).divide(toOneNum(jan_mean_steep)), "steep"); 
print(stdDev(feb_variance_steep).divide(toOneNum(feb_mean_steep)), "steep"); 
print(stdDev(mar_variance_steep).divide(toOneNum(mar_mean_steep)), "steep"); 
print(stdDev(apr_variance_steep).divide(toOneNum(apr_mean_steep)), "steep"); 
print(stdDev(may_variance_steep).divide(toOneNum(may_mean_steep)), "steep"); 
print(stdDev(jun_variance_steep).divide(toOneNum(jun_mean_steep)), "steep");
print(stdDev(jul_variance_steep).divide(toOneNum(jul_mean_steep)), "steep");
print(stdDev(aug_variance_steep).divide(toOneNum(aug_mean_steep)), "steep");
print(stdDev(sep_variance_steep).divide(toOneNum(sep_mean_steep)), "steep");
print(stdDev(oct_variance_steep).divide(toOneNum(oct_mean_steep)), "steep"); 
print(stdDev(nov_variance_steep).divide(toOneNum(nov_mean_steep)), "steep"); 
print(stdDev(dec_variance_steep).divide(toOneNum(dec_mean_steep)), "steep");
var list_CV_steep_db = ee.List([
  toDb(stdDev(jan_variance_steep).divide(toOneNum(jan_mean_steep))),
  toDb(stdDev(feb_variance_steep).divide(toOneNum(feb_mean_steep))), 
  toDb(stdDev(mar_variance_steep).divide(toOneNum(mar_mean_steep))),
  toDb(stdDev(apr_variance_steep).divide(toOneNum(apr_mean_steep))), 
  toDb(stdDev(may_variance_steep).divide(toOneNum(may_mean_steep))),  
  toDb(stdDev(jun_variance_steep).divide(toOneNum(jun_mean_steep))),
  toDb(stdDev(jul_variance_steep).divide(toOneNum(jul_mean_steep))),
  toDb(stdDev(aug_variance_steep).divide(toOneNum(aug_mean_steep))),
  toDb(stdDev(sep_variance_steep).divide(toOneNum(sep_mean_steep))),
  toDb(stdDev(oct_variance_steep).divide(toOneNum(oct_mean_steep))), 
  toDb(stdDev(nov_variance_steep).divide(toOneNum(nov_mean_steep))), 
  toDb(stdDev(dec_variance_steep).divide(toOneNum(dec_mean_steep)))
]);
print(list_CV_steep_db, "list_CV_steep_db");
 
///////////////////////////// Generate Graph & CSV ////////////////////////////////////////////////////
var jan = 1;
var feb = 2;
var mar = 3;
var apr = 4;
var may = 5;
var jun = 6;
var jul = 7;
var aug = 8;
var sep = 9;
var oct = 10;
var nov = 11;
var dec = 12;
// Define the chart and print it to the console.
var chart_CV_evergreen_db = ui.Chart.array.values({array: list_CV_evergreen_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Evergreen',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_evergreen_db);
var chart_CV_grassland_db = ui.Chart.array.values({array: list_CV_grassland_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Grassland',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_grassland_db);
 
var chart_CV_steep_db = ui.Chart.array.values({array: list_CV_steep_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Steep',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_steep_db);
var chart_CV_flat_db = ui.Chart.array.values({array: list_CV_flat_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV flat',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_flat_db);
Map.addLayer(monthly_mean.first(), {}, "first image from monthly mean to compare with GTC values")
