/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var intersect_geo = ee.FeatureCollection("projects/iscertc/assets/intersect_geo_mdd_4-24-23"),
    samples_evergreen = ee.FeatureCollection("projects/iscertc/assets/mdd_samples_evergreen"),
    samples_flat = ee.FeatureCollection("projects/iscertc/assets/mdd_samples_flat"),
    samples_grassland = ee.FeatureCollection("projects/iscertc/assets/mdd_samples_grassland"),
    samples_steep = ee.FeatureCollection("projects/iscertc/assets/mdd_samples_steep");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
////////////////////////////////////////////////////////////////////////////////////////
// SAR-RTC Comparison - SERVIR/ASF/Google 
// - Time Series  
// --- Coefficient of Variation (CoV) by forest & grassland (ascend vs. descend, VV vs. VH)
// --- CoV by flat & steep (ascend vs. descend, VV vs. VH)
// Author: Helen Blue Parache, Marshall Space Flight Center
// Date created: 10/09/2020
// Last modified:4/25/2023
/////////////////////////////////////////////////////////////////////////////////////// 
//Parts that the user has to change:
// 1. Samples (imported above as "samples_evergreen", "samples_flat", etc. keep same naming convention)
// 2. AOI geometry (imported above as "intersect_geo")
// 3. SAR data product (converted from GEE GRD below)
// 4. VV or VH (comment out to select your preferred input below)
// ---------------- Define AOI Extent --------------------------------------------------------
Map.centerObject(intersect_geo); 
///////////////////////////////////////// GTC ///////////////////////////////////////////////
//Prep SAR data
// load lib
// - volume was used for the single series analysis
var slope_lib = require('users/andreasvollrath/radar:slope_correction_lib.js');
var imageIDs = ee.List(["S1B_IW_GRDH_1SDV_20190103T101414_20190103T101439_014328_01AA92_7D9B", "S1B_IW_GRDH_1SDV_20190104T230809_20190104T230834_014350_01AB40_BA33", 
"S1B_IW_GRDH_1SDV_20190115T101414_20190115T101439_014503_01B03A_4439", "S1B_IW_GRDH_1SDV_20190127T101414_20190127T101439_014678_01B5D2_3B0A", "S1B_IW_GRDH_1SDV_20190128T230808_20190128T230833_014700_01B682_E797",
"S1B_IW_GRDH_1SDV_20190208T101413_20190208T101438_014853_01BB8C_940D", "S1B_IW_GRDH_1SDV_20190209T230808_20190209T230833_014875_01BC41_2A6A", "S1B_IW_GRDH_1SDV_20190220T101413_20190220T101438_015028_01C151_EA49",
"S1B_IW_GRDH_1SDV_20190221T230808_20190221T230833_015050_01C1FA_6916", "S1B_IW_GRDH_1SDV_20190304T101413_20190304T101438_015203_01C713_17EF", "S1B_IW_GRDH_1SDV_20190305T230808_20190305T230833_015225_01C7C5_4A2E",
"S1B_IW_GRDH_1SDV_20190316T101413_20190316T101438_015378_01CCBE_781F", "S1B_IW_GRDH_1SDV_20190317T230808_20190317T230833_015400_01CD6B_65D4", "S1B_IW_GRDH_1SDV_20190328T101413_20190328T101438_015553_01D27A_7404",
"S1B_IW_GRDH_1SDV_20190329T230808_20190329T230833_015575_01D324_A39E", "S1B_IW_GRDH_1SDV_20190409T101414_20190409T101439_015728_01D843_E7B3", "S1B_IW_GRDH_1SDV_20190410T230808_20190410T230833_015750_01D8F7_70FE",
"S1B_IW_GRDH_1SDV_20190421T101414_20190421T101439_015903_01DE0C_E919", "S1B_IW_GRDH_1SDV_20190422T230809_20190422T230834_015925_01DEBF_C6D7", "S1B_IW_GRDH_1SDV_20190503T101415_20190503T101440_016078_01E3E6_D149",
"S1B_IW_GRDH_1SDV_20190504T230809_20190504T230834_016100_01E49B_3784", "S1B_IW_GRDH_1SDV_20190515T101415_20190515T101440_016253_01E971_7A00", "S1B_IW_GRDH_1SDV_20190516T230810_20190516T230835_016275_01EA19_AAD4",
"S1B_IW_GRDH_1SDV_20190527T101416_20190527T101441_016428_01EECF_79D2", "S1B_IW_GRDH_1SDV_20190528T230810_20190528T230835_016450_01EF7B_0F0C", "S1B_IW_GRDH_1SDV_20190608T101416_20190608T101441_016603_01F407_282F",
"S1B_IW_GRDH_1SDV_20190609T230811_20190609T230836_016625_01F4AE_1822", "S1B_IW_GRDH_1SDV_20190620T101417_20190620T101442_016778_01F93E_D609", "S1B_IW_GRDH_1SDV_20190621T230812_20190621T230837_016800_01F9E4_D470",
"S1B_IW_GRDH_1SDV_20190702T101418_20190702T101443_016953_01FE6B_BE7D", "S1B_IW_GRDH_1SDV_20190703T230813_20190703T230838_016975_01FF12_54C9", "S1B_IW_GRDH_1SDV_20190714T101419_20190714T101444_017128_020394_A8B6",
"S1B_IW_GRDH_1SDV_20190715T230813_20190715T230838_017150_02043A_F0C3", "S1B_IW_GRDH_1SDV_20190726T101419_20190726T101444_017303_0208A8_2D9C", "S1B_IW_GRDH_1SDV_20190727T230814_20190727T230839_017325_020950_57E8",
"S1B_IW_GRDH_1SDV_20190807T101420_20190807T101445_017478_020DEF_A757", "S1B_IW_GRDH_1SDV_20190808T230815_20190808T230840_017500_020E99_A85E", "S1B_IW_GRDH_1SDV_20190819T101421_20190819T101446_017653_021365_B751",
"S1B_IW_GRDH_1SDV_20190820T230816_20190820T230841_017675_021411_7DA3", "S1B_IW_GRDH_1SDV_20190831T101421_20190831T101446_017828_0218D8_1ADE", "S1B_IW_GRDH_1SDV_20190901T230816_20190901T230841_017850_02197F_2672",
"S1B_IW_GRDH_1SDV_20190912T101422_20190912T101447_018003_021E50_B3FB", "S1B_IW_GRDH_1SDV_20190913T230817_20190913T230842_018025_021EF5_52BF", "S1B_IW_GRDH_1SDV_20191006T101423_20191006T101448_018353_022937_B959",
"S1B_IW_GRDH_1SDV_20191007T230817_20191007T230842_018375_0229E0_2C3C", "S1B_IW_GRDH_1SDV_20191018T101423_20191018T101448_018528_022E97_0AEB", "S1B_IW_GRDH_1SDV_20191019T230817_20191019T230842_018550_022F40_8AD1",
"S1B_IW_GRDH_1SDV_20191030T101423_20191030T101448_018703_02340F_3D8D", "S1B_IW_GRDH_1SDV_20191031T230817_20191031T230842_018725_0234B9_9881", "S1B_IW_GRDH_1SDV_20191111T101423_20191111T101448_018878_0239B4_3FCF",
"S1B_IW_GRDH_1SDV_20191112T230817_20191112T230842_018900_023A5D_B8FB", "S1B_IW_GRDH_1SDV_20191123T101423_20191123T101448_019053_023F55_95B6", "S1B_IW_GRDH_1SDV_20191124T230817_20191124T230842_019075_023FFF_B829",
"S1B_IW_GRDH_1SDV_20191205T101422_20191205T101447_019228_0244DD_9778", "S1B_IW_GRDH_1SDV_20191206T230816_20191206T230841_019250_024589_D25C", "S1B_IW_GRDH_1SDV_20191217T101422_20191217T101447_019403_024A73_D2A9",
"S1B_IW_GRDH_1SDV_20191218T230816_20191218T230841_019425_024B1D_7FF6", "S1B_IW_GRDH_1SDV_20191229T101421_20191229T101446_019578_025007_DB2A", "S1B_IW_GRDH_1SDV_20191230T230815_20191230T230840_019600_0250B2_1237"]);
print(imageIDs.length(), "number of IDs");
var input2gtc = ee.ImageCollection("COPERNICUS/S1_GRD")
    .filter(ee.Filter.inList('system:index', imageIDs))
    .filterDate('2019-01-01', '2019-12-31')
    .filter(ee.Filter.bounds(intersect_geo));
print(input2gtc, "input to GTC function"); 
function time_func (im) { 
  var time = im.get('system:time_start');
  return im.set('new_time', time);
}
var input2gtc_prep = input2gtc.map(time_func);
var gtc_collection_prep = input2gtc_prep.map(slope_lib.slope_correction_image); //slope_lib.slope_correction(input2gtc_prep);//input2gtc_prep.map(slope_lib.slope_correction_image);//slope_lib.slope_correction_image(input2gtc_prep.first())//input2gtc_prep.map(slope_lib.slope_correction_image())//slope_lib.slope_correction(input2gtc_prep);
function time_renew (im) { 
  var time = im.get('new_time');
  return im.set('system:time_start', time);
}
var gtc_collection_ = gtc_collection_prep.map(time_renew);
print(gtc_collection_, "GTC collection");
//Apply the NoData Mask
function filterNoData (image) {
  var mask = image.select("no_data_mask") //select appropriate mask
  return image.updateMask(mask) //apply mask to image
}
/*function filterInfinityValues(image) { //Source for mask function https://code.earthengine.google.com/3d910e11702eb0ef99c3d712d2942178; https://stackoverflow.com/questions/64311694/google-earth-engine-remove-value-from-s2-ndvi-image-collection-5-and-95-perce
  //Appropriate values for power scale: https://hyp3-docs.asf.alaska.edu/guides/introduction_to_sar/
  var bool = image.lt(999).gte(0); //.get(-999) - > internal errors; .gte(0)-> infinity again; Make a boolean showing if image meets conditions
  var boolMask = bool.selfMask(); // Create a mask from boolean
  return image.updateMask(boolMask); // Apply mask to image
}*/
var gtc_collection = gtc_collection_.map(filterNoData); //not sure if this will work bc not applying to VV and VH separately, but we can move it down if it doesn't work
print(gtc_collection);
//DES
var des_vh_prep = gtc_collection
    .filterDate('2019-01-01', '2019-12-31') 
    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')) // Filter by ascending orbit
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
    .filter(ee.Filter.bounds(intersect_geo)) // NP geo intersection
    .select('VH');
var des_vv_prep = gtc_collection
    .filterDate('2019-01-01', '2019-12-31')
    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')) // Filter by ascending orbit
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.bounds(intersect_geo)) // NP geo intersection
    .select('VV');
//AS
var as_vh_prep = gtc_collection
    .filterDate('2019-01-01', '2019-12-31')
    .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING')) // Filter by ascending orbit
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
    .filter(ee.Filter.bounds(intersect_geo)) // NP geo intersection
    .select('VH'); 
var as_vv_prep = gtc_collection
    .filterDate('2019-01-01', '2019-12-31')
    .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING')) // Filter by ascending orbit
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
    .filter(ee.Filter.bounds(intersect_geo)) // NP geo intersection
    .select('VV');
//rename bands to avoid "non homogenous" error later on
function renameVVbands(image) {
    return image.select('VV').rename('b1');
}
var des_vh = des_vh_prep.map(renameVVbands);
function renameVHbands(image) {
    return image.select('VH').rename('b1');
}
var des_vh = des_vh_prep.map(renameVHbands);
var des_vv = des_vv_prep.map(renameVVbands);
var as_vh = as_vh_prep.map(renameVHbands);
var as_vv = as_vv_prep.map(renameVVbands);
//convert to power
var toPWR = function(image) {
  //var pwr = ee.Image(10).pow(image.select('DES').divide(10)).copyProperties({
  var pwr = ee.Image(10).pow(image.divide(10)).copyProperties({
    source: image,
    properties: ['orbitProperties_pass', 'productType', 'system:index', 'system:time_start']}); // bc lost our properties again!
  return pwr;
};
//merge to make appropriate sets (VV, VH)
var vv_db = des_vv.merge(as_vv);
var vh_db = des_vh.merge(as_vh);
Map.addLayer(vv_db.first(), {}, "vv db first scene");
Map.addLayer(vh_db.first(), {}, "vh db first scene");
print(vv_db, "vv_db");
print(vh_db, "vh_db");
// apply conversion from dB to power to GRD image collections
var vv_pw = vv_db.map(toPWR);
var vh_pw = vh_db.map(toPWR);
print(vv_pw, "vv_pw");
Map.addLayer(vv_pw.first(), {}, "vv pw first scene");
print(vh_pw, "vh_pw");
Map.addLayer(vh_pw.first(), {}, "vh pw first scene");
 
//////////////////////////////// SWAP INPUTS BELOW //////////////////////////////////////////////////////
var input = vv_pw;
//var input = vh_pw;
//////////////////////////////// SWAP INPUTS ABOVE //////////////////////////////////////////////////////
// ------------------- Calculate Monthly Mean & Variance -------------------------------------------------
// one image per month of mean of all pixels, variance of all pixels
var months = ee.List.sequence(1, 12);
//mean
var monthly_mean = ee.ImageCollection.fromImages(
  months.map(function (m) {
    return input 
      .filter(ee.Filter.calendarRange(m, m, 'month'))
      .mean()
      .set('month', m);
 }));//.flatten()); //Need to flatten in order to have a feature collection of features rather than featureCollections (not features)
//variance
var monthly_variance = ee.ImageCollection.fromImages(
  months.map(function (m) {
    return input 
      .filter(ee.Filter.calendarRange(m, m, 'month'))
      //.variance()
      .reduce({reducer: ee.Reducer.variance()})
      .set('month', m);
 }));
 
 Map.addLayer(monthly_variance.first(),{}, "monthly_variance first")
 Map.addLayer(monthly_mean.first(),{}, "monthly_mean_first")
// ---------------- Get monthly mean for each sample ----------------------------------------------------
// this is taking mean of means, acceptable bc all means have same sample number
// ie same number of images for each selected pixel
var properties = ee.List(['mean']);
//var properties = ee.List(['month', 'mean']);
//mean_landcover
var mean_evergreen = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_evergreen,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var mean_grassland = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_grassland,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
//mean_slope
var mean_flat = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_flat,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var mean_steep = monthly_mean.map(function (image) {
  return image.reduceRegions({
  collection: samples_steep,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
//print(mean_evergreen, "Check me: mean_evergreen") 
//this should be 12 feature collections in a feature collection, one for each month
// ---------------- Get monthly variance for each sample ----------------------------------------------------
//NP_DES_variance_landcover
var variance_evergreen = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_evergreen,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var variance_grassland = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_grassland,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
//variance_slope
var variance_flat = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_flat,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
var variance_steep = monthly_variance.map(function (image) {
  return image.reduceRegions({
  collection: samples_steep,
  reducer: ee.Reducer.mean(),
  scale: 10
  }).copyProperties(image);
});  
// ---------------- Separate by Month ---------------------------------------------------------
// this is taking mean of means for each point, acceptable bc all means have same sample number
// ie same number of images for each selected pixel
var properties = ee.List(['mean']);
//Make each month separate
// LC - evergreen
var jan_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 1)).flatten();
//print(jan_mean_evergreen, "this is the january mean fc"); //feature collection
var feb_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 2)).flatten();
var mar_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 3)).flatten();
var apr_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 4)).flatten();
var may_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 5)).flatten();
var jun_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 6)).flatten();
var jul_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 7)).flatten();
var aug_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 8)).flatten();
var sep_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 9)).flatten();
var oct_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 10)).flatten();
var nov_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 11)).flatten();
var dec_mean_evergreen = mean_evergreen.filter(ee.Filter.eq('month', 12)).flatten();
var jan_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 1)).flatten();
var feb_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 2)).flatten();
var mar_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 3)).flatten();
var apr_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 4)).flatten();
var may_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 5)).flatten();
var jun_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 6)).flatten();
var jul_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 7)).flatten();
var aug_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 8)).flatten();
var sep_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 9)).flatten();
var oct_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 10)).flatten();
var nov_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 11)).flatten();
var dec_variance_evergreen = variance_evergreen.filter(ee.Filter.eq('month', 12)).flatten();
//print(jan_variance_evergreen, "this is the january variance fc");
//LC - grassland
var jan_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 1)).flatten();
var feb_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 2)).flatten();
var mar_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 3)).flatten();
var apr_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 4)).flatten();
var may_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 5)).flatten();
var jun_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 6)).flatten();
var jul_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 7)).flatten();
var aug_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 8)).flatten();
var sep_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 9)).flatten();
var oct_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 10)).flatten();
var nov_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 11)).flatten();
var dec_mean_grassland = mean_grassland.filter(ee.Filter.eq('month', 12)).flatten();
var jan_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 1)).flatten();
var feb_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 2)).flatten();
var mar_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 3)).flatten();
var apr_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 4)).flatten();
var may_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 5)).flatten();
var jun_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 6)).flatten();
var jul_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 7)).flatten();
var aug_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 8)).flatten();
var sep_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 9)).flatten();
var oct_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 10)).flatten();
var nov_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 11)).flatten();
var dec_variance_grassland = variance_grassland.filter(ee.Filter.eq('month', 12)).flatten();
//slope - flat
var jan_mean_flat = mean_flat.filter(ee.Filter.eq('month', 1)).flatten();
var feb_mean_flat = mean_flat.filter(ee.Filter.eq('month', 2)).flatten();
var mar_mean_flat = mean_flat.filter(ee.Filter.eq('month', 3)).flatten();
var apr_mean_flat = mean_flat.filter(ee.Filter.eq('month', 4)).flatten();
var may_mean_flat = mean_flat.filter(ee.Filter.eq('month', 5)).flatten();
var jun_mean_flat = mean_flat.filter(ee.Filter.eq('month', 6)).flatten();
var jul_mean_flat = mean_flat.filter(ee.Filter.eq('month', 7)).flatten();
var aug_mean_flat = mean_flat.filter(ee.Filter.eq('month', 8)).flatten();
var sep_mean_flat = mean_flat.filter(ee.Filter.eq('month', 9)).flatten();
var oct_mean_flat = mean_flat.filter(ee.Filter.eq('month', 10)).flatten();
var nov_mean_flat = mean_flat.filter(ee.Filter.eq('month', 11)).flatten();
var dec_mean_flat = mean_flat.filter(ee.Filter.eq('month', 12)).flatten();
var jan_variance_flat = variance_flat.filter(ee.Filter.eq('month', 1)).flatten();
var feb_variance_flat = variance_flat.filter(ee.Filter.eq('month', 2)).flatten();
var mar_variance_flat = variance_flat.filter(ee.Filter.eq('month', 3)).flatten();
var apr_variance_flat = variance_flat.filter(ee.Filter.eq('month', 4)).flatten();
var may_variance_flat = variance_flat.filter(ee.Filter.eq('month', 5)).flatten();
var jun_variance_flat = variance_flat.filter(ee.Filter.eq('month', 6)).flatten();
var jul_variance_flat = variance_flat.filter(ee.Filter.eq('month', 7)).flatten();
var aug_variance_flat = variance_flat.filter(ee.Filter.eq('month', 8)).flatten();
var sep_variance_flat = variance_flat.filter(ee.Filter.eq('month', 9)).flatten();
var oct_variance_flat = variance_flat.filter(ee.Filter.eq('month', 10)).flatten();
var nov_variance_flat = variance_flat.filter(ee.Filter.eq('month', 11)).flatten();
var dec_variance_flat = variance_flat.filter(ee.Filter.eq('month', 12)).flatten();
//slope - steep
var jan_mean_steep = mean_steep.filter(ee.Filter.eq('month', 1)).flatten();
var feb_mean_steep = mean_steep.filter(ee.Filter.eq('month', 2)).flatten();
var mar_mean_steep = mean_steep.filter(ee.Filter.eq('month', 3)).flatten();
var apr_mean_steep = mean_steep.filter(ee.Filter.eq('month', 4)).flatten();
var may_mean_steep = mean_steep.filter(ee.Filter.eq('month', 5)).flatten();
var jun_mean_steep = mean_steep.filter(ee.Filter.eq('month', 6)).flatten();
var jul_mean_steep = mean_steep.filter(ee.Filter.eq('month', 7)).flatten();
var aug_mean_steep = mean_steep.filter(ee.Filter.eq('month', 8)).flatten();
var sep_mean_steep = mean_steep.filter(ee.Filter.eq('month', 9)).flatten();
var oct_mean_steep = mean_steep.filter(ee.Filter.eq('month', 10)).flatten();
var nov_mean_steep = mean_steep.filter(ee.Filter.eq('month', 11)).flatten();
var dec_mean_steep = mean_steep.filter(ee.Filter.eq('month', 12)).flatten();
var jan_variance_steep = variance_steep.filter(ee.Filter.eq('month', 1)).flatten();
var feb_variance_steep = variance_steep.filter(ee.Filter.eq('month', 2)).flatten();
var mar_variance_steep = variance_steep.filter(ee.Filter.eq('month', 3)).flatten();
var apr_variance_steep = variance_steep.filter(ee.Filter.eq('month', 4)).flatten();
var may_variance_steep = variance_steep.filter(ee.Filter.eq('month', 5)).flatten();
var jun_variance_steep = variance_steep.filter(ee.Filter.eq('month', 6)).flatten();
var jul_variance_steep = variance_steep.filter(ee.Filter.eq('month', 7)).flatten();
var aug_variance_steep = variance_steep.filter(ee.Filter.eq('month', 8)).flatten();
var sep_variance_steep = variance_steep.filter(ee.Filter.eq('month', 9)).flatten();
var oct_variance_steep = variance_steep.filter(ee.Filter.eq('month', 10)).flatten();
var nov_variance_steep = variance_steep.filter(ee.Filter.eq('month', 11)).flatten();
var dec_variance_steep = variance_steep.filter(ee.Filter.eq('month', 12)).flatten();
//------------------------- Calculate CV ------------------------------------------------------
// ---------------- Apply Power to dB Conversion -------------------------------------------
// CoV = stdDev/mean
var properties_1 = ee.List(['mean']); //added this up here since I don't think we had properties or properties_1 defined before the function
var toOneNum = function(fc) {
  var one_num = fc.reduceColumns({ //need this to be a feature collection instead of a feature
    reducer: ee.Reducer.mean(), //shouldn't this mean be sum?? No bc mean of mean is the mean of all, as long as the sample size is the same
    selectors: properties_1 //properties, updated this 4/11/23 //this didn't fix the infinities
  })
  return ee.Number(one_num.get('mean'))//.log10().multiply(10);
};
var properties_1 = ee.List(['mean']); // this is still mean, since we used the "mean" reducer to collect the pixel value at the point location
var stdDev = function(fc) {
  var one_num = fc.reduceColumns({
    reducer: ee.Reducer.sum(),
    selectors: properties_1
  })
  var sum = one_num.get('sum')
  var stdev = ee.Number(sum).sqrt()
  return ee.Number(stdev)//.log10().multiply(10);
};
//https://socratic.org/statistics/random-variables/addition-rules-for-variances#:~:text=You%20cannot%20just%20add%20the,won't%20delve%20into).
//use variance reducer instead of standard deviation, then sum all variance values, finally take square root
var properties_1 = ee.List(['mean']); // this is still mean, since we used the "mean" reducer to collect the pixel value at the point location
var toDb = function(num) {
  return num.log10().multiply(10);
};
/*print("checking onc_num function with jan_mean_evergreen")
var one_num = jan_mean_evergreen.reduceColumns({ //need this to be a feature collection instead of a feature
    reducer: ee.Reducer.mean(), //shouldn't this mean be sum?? No bc mean of mean is the mean of all, as long as the sample size is the same
    selectors: properties_1
  })
print(one_num) //infinity
var jan_mean_evergreen_min = jan_mean_evergreen.reduceColumns({ //need this to be a feature collection instead of a feature
    reducer: ee.Reducer.min(), //0
    selectors: properties_1
  })
  
  var jan_mean_evergreen_max = jan_mean_evergreen.reduceColumns({ //need this to be a feature collection instead of a feature
    reducer: ee.Reducer.max(), //infinity
    selectors: properties_1
  })*/
//print(jan_mean_evergreen_min, "jan mean evergreen min")
//print(jan_mean_evergreen_max, "jan mean evergreen max") //8.37
//var final = ee.Number(one_num.get('mean'))
//print(final) //1.67
//print("checking CoV math for jan evergreen - one step at a time");
/*print(stdDev(jan_variance_evergreen)); //1.16...
print((toOneNum(jan_mean_evergreen))); //was infinity, after mask is 9993.9
print(stdDev(jan_variance_evergreen).divide(toOneNum(jan_mean_evergreen))); //was -infinity, after mask is 39.9
print(toDb(stdDev(jan_variance_evergreen).divide(toOneNum(jan_mean_evergreen)))); //*/
var list_CV_evergreen_db = ee.List([
  toDb(stdDev(jan_variance_evergreen).divide(toOneNum(jan_mean_evergreen))),
  toDb(stdDev(feb_variance_evergreen).divide(toOneNum(feb_mean_evergreen))), 
  toDb(stdDev(mar_variance_evergreen).divide(toOneNum(mar_mean_evergreen))),
  toDb(stdDev(apr_variance_evergreen).divide(toOneNum(apr_mean_evergreen))), 
  toDb(stdDev(may_variance_evergreen).divide(toOneNum(may_mean_evergreen))),  
  toDb(stdDev(jun_variance_evergreen).divide(toOneNum(jun_mean_evergreen))),
  toDb(stdDev(jul_variance_evergreen).divide(toOneNum(jul_mean_evergreen))),
  toDb(stdDev(aug_variance_evergreen).divide(toOneNum(aug_mean_evergreen))),
  toDb(stdDev(sep_variance_evergreen).divide(toOneNum(sep_mean_evergreen))),
  toDb(stdDev(oct_variance_evergreen).divide(toOneNum(oct_mean_evergreen))), 
  toDb(stdDev(nov_variance_evergreen).divide(toOneNum(nov_mean_evergreen))), 
  toDb(stdDev(dec_variance_evergreen).divide(toOneNum(dec_mean_evergreen)))
]);
print(list_CV_evergreen_db, "CV Evergreen (db)");
var list_CV_grassland_db = ee.List([
  toDb(stdDev(jan_variance_grassland).divide(toOneNum(jan_mean_grassland))),
  toDb(stdDev(feb_variance_grassland).divide(toOneNum(feb_mean_grassland))), 
  toDb(stdDev(mar_variance_grassland).divide(toOneNum(mar_mean_grassland))),
  toDb(stdDev(apr_variance_grassland).divide(toOneNum(apr_mean_grassland))), 
  toDb(stdDev(may_variance_grassland).divide(toOneNum(may_mean_grassland))),  
  toDb(stdDev(jun_variance_grassland).divide(toOneNum(jun_mean_grassland))), //before the mask, June was outputting as infinity...
  toDb(stdDev(jul_variance_grassland).divide(toOneNum(jul_mean_grassland))),
  toDb(stdDev(aug_variance_grassland).divide(toOneNum(aug_mean_grassland))),
  toDb(stdDev(sep_variance_grassland).divide(toOneNum(sep_mean_grassland))),
  toDb(stdDev(oct_variance_grassland).divide(toOneNum(oct_mean_grassland))), 
  toDb(stdDev(nov_variance_grassland).divide(toOneNum(nov_mean_grassland))), 
  toDb(stdDev(dec_variance_grassland).divide(toOneNum(dec_mean_grassland)))
]);
  
print(list_CV_grassland_db, "list_CV_grassland_db");
var list_CV_flat_db = ee.List([
  toDb(stdDev(jan_variance_flat).divide(toOneNum(jan_mean_flat))),
  toDb(stdDev(feb_variance_flat).divide(toOneNum(feb_mean_flat))), 
  toDb(stdDev(mar_variance_flat).divide(toOneNum(mar_mean_flat))),
  toDb(stdDev(apr_variance_flat).divide(toOneNum(apr_mean_flat))), 
  toDb(stdDev(may_variance_flat).divide(toOneNum(may_mean_flat))),  
  toDb(stdDev(jun_variance_flat).divide(toOneNum(jun_mean_flat))),
  toDb(stdDev(jul_variance_flat).divide(toOneNum(jul_mean_flat))),
  toDb(stdDev(aug_variance_flat).divide(toOneNum(aug_mean_flat))),
  toDb(stdDev(sep_variance_flat).divide(toOneNum(sep_mean_flat))),
  toDb(stdDev(oct_variance_flat).divide(toOneNum(oct_mean_flat))), 
  toDb(stdDev(nov_variance_flat).divide(toOneNum(nov_mean_flat))), 
  toDb(stdDev(dec_variance_flat).divide(toOneNum(dec_mean_flat)))
]);
  
print(list_CV_flat_db, "list_CV_flat_db");
var list_CV_steep_db = ee.List([
  toDb(stdDev(jan_variance_steep).divide(toOneNum(jan_mean_steep))),
  toDb(stdDev(feb_variance_steep).divide(toOneNum(feb_mean_steep))), 
  toDb(stdDev(mar_variance_steep).divide(toOneNum(mar_mean_steep))),
  toDb(stdDev(apr_variance_steep).divide(toOneNum(apr_mean_steep))), 
  toDb(stdDev(may_variance_steep).divide(toOneNum(may_mean_steep))),  
  toDb(stdDev(jun_variance_steep).divide(toOneNum(jun_mean_steep))),
  toDb(stdDev(jul_variance_steep).divide(toOneNum(jul_mean_steep))),
  toDb(stdDev(aug_variance_steep).divide(toOneNum(aug_mean_steep))),
  toDb(stdDev(sep_variance_steep).divide(toOneNum(sep_mean_steep))),
  toDb(stdDev(oct_variance_steep).divide(toOneNum(oct_mean_steep))), 
  toDb(stdDev(nov_variance_steep).divide(toOneNum(nov_mean_steep))), 
  toDb(stdDev(dec_variance_steep).divide(toOneNum(dec_mean_steep)))
]);
print(list_CV_steep_db, "list_CV_steep_db");
 
///////////////////////////// Generate Graph & CSV ////////////////////////////////////////////////////
var jan = 1;
var feb = 2;
var mar = 3;
var apr = 4;
var may = 5;
var jun = 6;
var jul = 7;
var aug = 8;
var sep = 9;
var oct = 10;
var nov = 11;
var dec = 12;
// Define the chart and print it to the console.
var chart_CV_evergreen_db = ui.Chart.array.values({array: list_CV_evergreen_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Evergreen',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_evergreen_db);
var chart_CV_grassland_db = ui.Chart.array.values({array: list_CV_grassland_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Grassland',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_grassland_db);
 
var chart_CV_steep_db = ui.Chart.array.values({array: list_CV_steep_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV Steep',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_steep_db);
var chart_CV_flat_db = ui.Chart.array.values({array: list_CV_flat_db, axis: 0, xLabels: months})
                .setOptions({
                  title: 'CV flat',
                  hAxis: {
                    title: 'months',
                    viewWindowMode: 'maximized',
                    ticks: [
                      {v: jan, f: 'Jan'},
                      {v: feb, f: 'Feb'},
                      {v: mar, f: 'Mar'},
                      {v: apr, f: 'Apr'},
                      {v: may, f: 'May'},
                      {v: jun, f: 'Jun'},
                      {v: jul, f: 'Jul'},
                      {v: aug, f: 'Aug'},
                      {v: sep, f: 'Sep'},
                      {v: oct, f: 'Oct'},
                      {v: nov, f: 'Nov'},
                      {v: dec, f: 'Dec'}
                    ],
                    titleTextStyle: {italic: false, bold: true}
                  },
                  vAxis: {
                    title: 'backscatter (db)',
                    titleTextStyle: {italic: false, bold: true}
                  },
                  colors: ['39a8a7'],
                  lineWidth: 3,
                  pointSize: 7,
                  viewWindow: {min: jan, max: dec},
                  legend: {position: 'none'}
                });
print(chart_CV_flat_db);
